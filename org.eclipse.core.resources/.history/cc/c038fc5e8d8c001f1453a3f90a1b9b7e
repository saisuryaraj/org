package utilities;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Properties;

public class Config {
    private Properties properties;

    public Config() {
        properties = new Properties();
        String filePath = Paths.get("src", "test", "resources", "config.properties").toAbsolutePath().toString();
        
        try (InputStream input = new FileInputStream(filePath)) {
            properties.load(input);
        } catch (IOException e) {
            System.err.println("Error loading properties file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public String getDecryptedPassword() {
        String decryptedPassword = null;
        try {
            // Retrieve the encrypted password and key from properties
            String encryptedPassword = properties.getProperty("db.password");
            String keyString = properties.getProperty("encryption.key");

            if (encryptedPassword == null || keyString == null) {
                System.err.println("Encrypted password or encryption key is not found in properties.");
                return null;
            }

            // Convert the base64 key string back to SecretKey
            byte[] decodedKey = Base64.getDecoder().decode(keyString);
            SecretKey secretKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");

            // Decrypt the password
            decryptedPassword = EncryptionUtil.decrypt(encryptedPassword, secretKey);
        } catch (Exception e) {
            System.err.println("Error decrypting password: " + e.getMessage());
            e.printStackTrace();
        }
        return decryptedPassword;
    }
}
